// === PROCEDURES === //

proc init() {
	t=0
	tstart = 0
	tstop = 10
	dt = dt0

	spike = 0

	T_STOP = tstop
	Tspike = T_STOP

	finitialize(v_init)	// set all state variables
	fcurrent()

	forall{el_hh = (ina + ik + gl_hh*v_init)/gl_hh}
	
	V_soma = soma[0].v(0.5)
	V_soma_prec = V_soma
}

proc run1() {
	// (-2) Initialisation
	init()
	
	// (0) Phase 0 : delai
	tstop = 10
	run2(0,10)

}

proc run2() {local tstart, tstop
	tstart = $1
	tstop = $2
	strdef data_prefix,b
	data_prefix = "./field_data/test_field_"
	i = 0
	while (t< tstop){
	      print t, "   ", c
	      sprint(c,"%s%d.txt",data_prefix,i)
	      insert_extracellular(c)
	      f_advance()
	      i = i + 1
	      i = i%9
	}
	      
}
/*
proc advance() {local tstart, tstop
	tstop = $2
	while (t < tstop) {
		fadvance()
		V_soma_prec_prec = V_soma_prec
		V_soma_prec = V_soma
		V_soma = soma[0].v(0.5)

		if(writefile == 1 && t == time2) {
			// f1.printf("%f\t%f\n",t,V_soma)
			for(k=0; k<naxon; k=k+1) {
				f1.printf("%f\t%f\t%f\n", axon[naxon-(k+1)].v(0.5), axon[naxon-(k+1)].vext[0], axon[naxon-(k+1)].vext[1])
			}
			for(k=0; k<nsoma; k=k+1) {
				f1.printf("%f\t%f\t%f\n", soma[k].v(0.5), soma[k].vext[0], soma[k].vext[1])
			}
			for(k=0; k<ndendrite; k=k+1) {
				f1.printf("%f\t%f\t%f\n", dendrite[k].v(0.5), dendrite[k].vext[0], dendrite[k].vext[1])
			}

		}

		// if (V_soma_prec > SDT && V_soma_prec > V_soma) {
		if (V_soma_prec > SDT && V_soma_prec > V_soma && V_soma_prec > V_soma_prec_prec && t > length0+length1+length2+length3) {
// && t > length0+length1+length2+length3) {
			spike = 1
			Tspike = t
			Tspike_high = t
		}

		if (spike && displayall == 0) {
			t = tstop
		}
	}
}
*/